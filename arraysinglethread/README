ARRAYSINGLETHREAD

Compare single-core real and complex arithmetic performance on arrays
in C, C++, and Fortran.  The task is mostly memory-bounds (a couple of
flops per array entry).  One point is to compare C complex.h vs C++
complex vector arithmetic, and ensure no slower than Fortran native
complex arithmetic.

Alex Barnett, Jeremy Magland, with advice from Andras Pataki.

Initial version 3/28/17
Rename 2/21/20

To compile and perform all tests on linux system with GCC, run: 

   ./do_complextimings.sh

There is no makefile. Adjust FC and GXX in the above script to change
compiler and flags. See results/complextiming_results*.txt for results
with various flags on various machines.

Summary:

i7 (laptop): -O3 -march=native -fcx-limited-range
is best, and faster than Ofast, amazingly, in the C and C++ types.
For this case, fortran = C-type = by-hand-RIRIRI... = C++-type,
and are only 50% slower than reals.
(Probably due to RAM-bottleneck not flops).
GCC 5.4 same as GCC 7.2.
unroll-loops didn't matter for the above choice.
C++-types without march=native are 50% slower, as are fortran.
RRRIII storage is always 10% slower than RIRIRI, so don't use it.
Concl: don't use -Ofast since it's not even the fastest!

xeon (desktop): -Ofast is best (unroll-loops doesn't hurt).  C++
std::complex<double> is 40% slower than C-type even for this best
setting. -march=native actually hurts the xeon, around 10% slower.
Conclusion is: avoid std::complex<double> and march=native. Use
C-type complex.

Notes:

1) Strict IEEE compliance can be a speed hit in C and C++.
-Ofast enables -ffast-math, which removes the function call and
conditionals about Infs, Nans, etc, compiled into the assembly code to
make strict IEEE-compliant complex arithmetic in the usual
optimizations up to -O3.  With only -O3 complex types run slower than
hand-coded real arithmetic.
BUT, this can be recovered with -fcx-limited-range.

2)
Doing it by hand with RRR..III... storage is silly anyway and adds 10%
overhead. By hand with RIRIRI... storage is no faster than complex types
in either C or C++.

3) Enable either USE_C_TYPE_COMPLEX or USE_CPP_TYPE_COMPLEX in the C++ code.

4) Each operation is a multiplication and an addition. That way the result is accumulated (see next note)
(I also created a new version of the fortran to use the same computation)

5) The result of the computation is printed out, so we are sure we are doing the same thing in each run.

6) Scope {} around each section

7) Fixed the random data once and for all at the top, so we can compare results.
