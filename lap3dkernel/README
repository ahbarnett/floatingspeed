lap3dkernel.

Dense direct N-body performance tests.  Currently this has one
directory for each language implementation, with code for summing 1/r
from 1e4 sources to 1e4 targets, for double precision reals.  This is
my own version of David Stein's similar performance comparison on the
same task.

Alex Barnett, Mar 2020


To run all tests in linux (assumes you have all packages and compilers; you
may need to change g++-7 to your version of g++, etc):

  ./run_all_tests.sh


RESULTS:

i7-7700HQ (2017-era laptop, 2.8GHz, 3.8GHz turbo, avx2, 4-core, 8-threads):

* C++ (GCC 7) + omp:                               1.1  Gpair/sec
      manual SIMD VCL vectorclass library + omp    2.7  Gpair/sec
* fortran (GCC 7) + omp:                           1.3  Gpair/sec
* julia w/ @threads @simd writing C-like code:     1.3  Gpair/sec
   native julia:                                   0.06 Gpair/sec
* python (Intel) w/ numba: after jit compile 3 s:  1.3  Gpair/sec
   native py:                                      0.05 Gpair/sec     
* MATLAB (R2017a, uses all 8 threads):             0.11 Gpair/sec
* octave (w/ same code as MATLAB, uses 1 thread):  0.06 Gpair/sec

Notes: Clearly C++ w/ VCL beats others by 2x.
It would be interesting to try the single-precision test where fast rsqrt
can also be used in VCL.

